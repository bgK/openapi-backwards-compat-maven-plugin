openapi: 3.0.1
info:
  title: Petstore Sample API
  description: A sample API that uses a petstore as an example to demonstrate features
    in the swagger-2.0 specification
  contact:
    name: Swagger API Team
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
servers:
  - url: //petstore.swagger.io/api
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations about user
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /pet:
    put:
      tags:
        - pet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Pet'
        required: false
      responses:
        "405":
          description: Validation exception
          content: {}
        "404":
          description: Pet not found
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
    post:
      tags:
        - pet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tag'
        required: false
      responses:
        "405":
          description: Invalid input
          content: {}
  /user/createWithList:
    post:
      tags:
        - user
      requestBody:
        description: List of user object
        content:
          '*/*': {}
        required: false
  /store/order/{orderId}:
    get:
      tags:
        - store
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        "404":
          description: Order not found
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
    delete:
      tags:
        - store
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "404":
          description: Order not found
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
  /user/createWithArray:
    post:
      tags:
        - user
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: false
  /store/order:
    post:
      tags:
        - store
      requestBody:
        description: order placed for purchasing the pet
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: false
      responses:
        "400":
          description: Invalid Order
          content: {}
  /pet/findByStatus:
    get:
      tags:
        - pet
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          schema:
            type: string
      responses:
        "400":
          description: Invalid status value
          content: {}
  /user/{username}:
    get:
      tags:
        - user
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        "404":
          description: User not found
          content: {}
        "400":
          description: Invalid username supplied
          content: {}
    put:
      tags:
        - user
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: false
      responses:
        "404":
          description: User not found
          content: {}
        "400":
          description: Invalid user supplied
          content: {}
    delete:
      tags:
        - user
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "404":
          description: User not found
          content: {}
        "400":
          description: Invalid username supplied
          content: {}
  /pet/findByTags:
    get:
      tags:
        - pet
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          schema:
            type: string
      responses:
        "400":
          description: Invalid tag value
          content: {}
  /user:
    post:
      tags:
        - user
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: false
  /pet/{petId}:
    get:
      tags:
        - pet
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        "404":
          description: Pet not found
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
    head:
      tags:
        - pet
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        "404":
          description: Pet not found
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
  /user/login:
    get:
      tags:
        - user
      parameters:
        - name: username
          in: query
          description: The user name for login
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          schema:
            type: string
      responses:
        "400":
          description: Invalid username/password supplied
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        lastName:
          type: string
        username:
          type: string
        phone:
          type: string
        email:
          type: string
        userStatus:
          type: integer
          format: int32
        firstName:
          type: string
        password:
          type: string
        sex:
          type: string
          enum:
            - MALE
            - FEMALE
            - UNKNOWN
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        category:
          $ref: '#/components/schemas/Category'
        status:
          type: string
        name:
          type: string
        photoUrls:
          type: array
          items:
            type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int32
        petId:
          type: integer
          format: int32
        status:
          type: string
        complete:
          type: boolean
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
